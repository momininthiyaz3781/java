Task 3: Implementing the KMP Algorithm

       Code the Knuth-Morris-Pratt (KMP) algorithm in Java for pattern searching which pre-processes the pattern to reduce the number of comparisons. Explain how this pre-processing improves the search time compared to the naive approach.
Explantion:

The Knuth-Morris-Pratt (KMP) algorithm is a string searching (or pattern matching) algorithm that improves the worst-case performance compared to the naive approach. The key idea behind KMP is to use the information gained by the previous character matches to avoid unnecessary comparisons in the future.
Here’s how the pre-processing improves search time:

Naive Approach: 

*In the worst case, it performs O(m(n−m+1)) comparisons, where m is the length of the pattern and n is the length of the text. This happens because, after a mismatch, the algorithm only shifts the pattern by one and starts matching again from the beginning of the pattern.

MP Approach: 

*It performs at most 2n comparisons in the worst case, which is O(n+m)
*The pre-processing computes a longest proper prefix array (LPS) that helps to skip characters that will anyway match, based on the previous partial match. This means after a mismatch, the algorithm uses the LPS array to shift the pattern more intelligently, often skipping several characters that don’t need to be matched again.

Now, let’s implement the KMP algorithm in Java:

public class KMPStringMatching {

    void KMPSearch(String pat, String txt) {
        int M = pat.length();
        int N = txt.length();

        // Create lps[] that will hold the longest prefix suffix values for pattern
        int lps[] = new int[M];
        int j = 0; // index for pat[]

        // Preprocess the pattern (calculate lps[] array)
        computeLPSArray(pat, M, lps);

        int i = 0; // index for txt[]
        while (i < N) {
            if (pat.charAt(j) == txt.charAt(i)) {
                j++;
                i++;
            }
            if (j == M) {
                System.out.println("Found pattern at index " + (i - j));
                j = lps[j - 1];
            }

            // Mismatch after j matches
            else if (i < N && pat.charAt(j) != txt.charAt(i)) {
                // Do not match lps[0..lps[j-1]] characters,
                // they will match anyway
                if (j != 0)
                    j = lps[j - 1];
                else
                    i = i + 1;
            }
        }
    }

    void computeLPSArray(String pat, int M, int lps[]) {
        // Length of the previous longest prefix suffix
        int len = 0;
        int i = 1;
        lps[0] = 0; // lps[0] is always 0

        // The loop calculates lps[i] for i = 1 to M-1
        while (i < M) {
            if (pat.charAt(i) == pat.charAt(len)) {
                len++;
                lps[i] = len;
                i++;
            } else { // (pat[i] != pat[len])
                if (len != 0) {
                    len = lps[len - 1];
                    // Also, note that we do not increment i here
                } else { // if (len == 0)
                    lps[i] = len;
                    i++;
                }
            }
        }
    }

    // Driver program to test above function
    public static void main(String args[]) {
        String txt = "ABABDABACDABABCABAB";
        String pat = "ABABCABAB";
        new KMPStringMatching().KMPSearch(pat, txt);
    }
} 
........................................................................................................
*This Java code defines a KMPStringMatching class with two methods: 
KMPSearch to search for the pattern in the given text and computeLPSArray to preprocess the pattern and create the LPS array. The main method demonstrates how to use this class to find a pattern within a text.

*The computeLPSArray method is where the pre-processing happens. It calculates the LPS array which contains the length of the longest proper prefix that is also a suffix. 
This array is then used during the search process to skip comparisons based on the information of previous matches, thus improving the search time significantly compared to the naive approach.

